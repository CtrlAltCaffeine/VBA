Sub ImportAndAnalyzeNifty50Data()
    Dim ws As Worksheet
    Set ws = ThisWorkbook.Sheets("Nifty50Data")
    
    ' Clear existing data
    ws.Cells.Clear
    
    ' Import CSV data
    With ws.QueryTables.Add(Connection:="TEXT;nifty_50_data.csv", Destination:=ws.Range("A1"))
        .TextFileParseType = xlDelimited
        .TextFileConsecutiveDelimiter = False
        .TextFileTabDelimiter = False
        .TextFileSemicolonDelimiter = False
        .TextFileCommaDelimiter = True
        .TextFilePlatform = xlWindows
        .Refresh BackgroundQuery:=False
    End With
    
    ' Calculate average closing price for each stock
    Dim lastRow As Long
    lastRow = ws.Cells(ws.Rows.Count, "A").End(xlUp).Row
    
    Dim stockSymbols As Collection
    Set stockSymbols = New Collection
    
    Dim i As Long
    For i = 2 To lastRow
        On Error Resume Next
        stockSymbols.Add ws.Cells(i, 1).Value, CStr(ws.Cells(i, 1).Value)
        On Error GoTo 0
    Next i
    
    Dim stock As Variant
    Dim startRow As Long
    Dim endRow As Long
    Dim totalClose As Double
    Dim count As Long
    Dim avgClose As Double
    Dim outputRow As Long
    outputRow = 2
    
    ws.Cells(1, "G").Value = "Stock Symbol"
    ws.Cells(1, "H").Value = "Average Closing Price"
    
    For Each stock In stockSymbols
        startRow = Application.WorksheetFunction.Match(stock, ws.Columns("A"), 0)
        endRow = Application.WorksheetFunction.Match(stock & ".99999999999", ws.Columns("A"), 1) - 1
        
        totalClose = Application.WorksheetFunction.Sum(ws.Range("F" & startRow & ":F" & endRow))
        count = endRow - startRow + 1
        avgClose = totalClose / count
        
        ws.Cells(outputRow, "G").Value = stock
        ws.Cells(outputRow, "H").Value = avgClose
        
        outputRow = outputRow + 1
    Next stock
    
    MsgBox "Data import and analysis complete!", vbInformation
End Sub

import re
import pandas as pd

def extract_positions_to_dataframe(json_string):
    m_positions = re.search(r'"positions"\s*:\s*(.*?)', json_string, re.DOTALL)
    if not m_positions:
        raise ValueError("Could not find 'positions' in the JSON string")
    positions_str = m_positions.group(1)
    pattern_netqty = re.compile(r'"netQty"\s*:\s*(-?\d+)')
    pattern_instrument = re.compile(r'"instrument"\s*:\s*(\{.*?\})', re.DOTALL)
    netqty_matches = [(m.start(), 'netQty', m.group(1)) for m in pattern_netqty.finditer(positions_str)]
    instrument_matches = [(m.start(), 'instrument', m.group(1)) for m in pattern_instrument.finditer(positions_str)]
    all_matches = netqty_matches + instrument_matches
    all_matches.sort(key=lambda x: x[0])
    
    def parse_instrument(instr_str):
        content = instr_str.strip()[1:-1]
        fields = re.findall(r'"([^"]+)"\s*:\s*("[^"]+"|\d+\.?\d*|null)', content)
        d = {}
        for key, value in fields:
            if value.startswith('"') and value.endswith('"'):
                d[key] = value[1:-1]
            elif value == "null":
                d[key] = None
            elif '.' in value:
                d[key] = float(value)
            else:
                d[key] = int(value)
        return d

    results = []
    current_netqty = None
    for pos, typ, value in all_matches:
        if typ == 'netQty':
            current_netqty = int(value)
        elif typ == 'instrument':
            instrument_data = parse_instrument(value)
            row = {'netQty': current_netqty}
            row.update(instrument_data)
            results.append(row)
            current_netqty = None
    df = pd.DataFrame(results)
    return df

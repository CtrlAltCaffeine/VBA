Sub ImportAndAnalyzeNifty50Data()
    Dim ws As Worksheet
    Set ws = ThisWorkbook.Sheets("Nifty50Data")
    
    ' Clear existing data
    ws.Cells.Clear
    
    ' Import CSV data
    With ws.QueryTables.Add(Connection:="TEXT;nifty_50_data.csv", Destination:=ws.Range("A1"))
        .TextFileParseType = xlDelimited
        .TextFileConsecutiveDelimiter = False
        .TextFileTabDelimiter = False
        .TextFileSemicolonDelimiter = False
        .TextFileCommaDelimiter = True
        .TextFilePlatform = xlWindows
        .Refresh BackgroundQuery:=False
    End With
    
    ' Calculate average closing price for each stock
    Dim lastRow As Long
    lastRow = ws.Cells(ws.Rows.Count, "A").End(xlUp).Row
    
    Dim stockSymbols As Collection
    Set stockSymbols = New Collection
    
    Dim i As Long
    For i = 2 To lastRow
        On Error Resume Next
        stockSymbols.Add ws.Cells(i, 1).Value, CStr(ws.Cells(i, 1).Value)
        On Error GoTo 0
    Next i
    
    Dim stock As Variant
    Dim startRow As Long
    Dim endRow As Long
    Dim totalClose As Double
    Dim count As Long
    Dim avgClose As Double
    Dim outputRow As Long
    outputRow = 2
    
    ws.Cells(1, "G").Value = "Stock Symbol"
    ws.Cells(1, "H").Value = "Average Closing Price"
    
    For Each stock In stockSymbols
        startRow = Application.WorksheetFunction.Match(stock, ws.Columns("A"), 0)
        endRow = Application.WorksheetFunction.Match(stock & ".99999999999", ws.Columns("A"), 1) - 1
        
        totalClose = Application.WorksheetFunction.Sum(ws.Range("F" & startRow & ":F" & endRow))
        count = endRow - startRow + 1
        avgClose = totalClose / count
        
        ws.Cells(outputRow, "G").Value = stock
        ws.Cells(outputRow, "H").Value = avgClose
        
        outputRow = outputRow + 1
    Next stock
    
    MsgBox "Data import and analysis complete!", vbInformation
End Sub

import json
import pandas as pd

json_string = """
{
  "header": {
    "sentTime": "2025-02-06T04:33:20Z",
    "pointInTime": "2025-02-05",
    "runNumber": 47
  },
  "portfolios": [
    {
      "currency": "USD",
      "customerAccountType": "MEMBER",
      "entries": [
        {
          "accountId": "790-98080",
          "originType": "99",
          "id": "DRM_798_MINI_DOW",
          "positions": [
            {
              "netQty": 5
            },
            {
              "instrument": {
                "exchangeId": "XOC",
                "clearingOrganizationId": "XMAR",
                "productCode": "20250207",
                "productType": "OOP",
                "periodCode": "IMM",
                "putCallInd": "P",
                "strike": 218.0,
                "underlyingPeriodCode": "000000"
              }
            },
            {
              "netQty": -3
            },
            {
              "instrument": {
                "exchangeId": "XOC",
                "clearingOrganizationId": "XMAR",
                "productCode": "20250208",
                "productType": "OOP",
                "periodCode": "IMM",
                "putCallInd": "C",
                "strike": 220.0,
                "underlyingPeriodCode": "000000"
              }
            }
          ]
        }
      ]
    }
  ]
}
"""

data = json.loads(json_string)
rows = []
for portfolio in data.get("portfolios", []):
    for entry in portfolio.get("entries", []):
        positions = entry.get("positions", [])
        current_net_qty = None
        for item in positions:
            if "netQty" in item:
                current_net_qty = item["netQty"]
            elif "instrument" in item:
                instrument = item["instrument"]
                row = {
                    "netQty": current_net_qty,
                    "exchangeId": instrument.get("exchangeId"),
                    "clearingOrganizationId": instrument.get("clearingOrganizationId"),
                    "productCode": instrument.get("productCode"),
                    "productType": instrument.get("productType"),
                    "periodCode": instrument.get("periodCode"),
                    "putCallInd": instrument.get("putCallInd"),
                    "strike": instrument.get("strike"),
                    "underlyingPeriodCode": instrument.get("underlyingPeriodCode")
                }
                rows.append(row)
                current_net_qty = None

df = pd.DataFrame(rows)
print(df)
csv_output = df.to_csv(index=False)
print(csv_output)

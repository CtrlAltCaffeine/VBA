import pandas as pd
import dash
from dash import dcc, html
from dash.dependencies import Input, Output
import plotly.express as px
import plotly.graph_objects as go
import dash_table

# Load the survey data
df = pd.read_csv('/path/to/your/survey_data.csv')

# Data preprocessing
# Renaming columns for easier reference
df.columns = ['timestamp', 'firm_id_name', 'first_pref_date', 'second_pref_date', 'third_pref_date', 'technical_freeze', 'comments']

# Initialize Dash app
app = dash.Dash(__name__)

# App layout
app.layout = html.Div(children=[
    html.H1(children='Survey Data Analysis Dashboard'),

    html.Div(children='''
        This dashboard visualizes the survey data.
    '''),

    dcc.Graph(id='first-pref-pie'),
    dcc.Graph(id='second-pref-pie'),
    dcc.Graph(id='third-pref-pie'),
    dcc.Graph(id='stacked-bar-chart'),
    
    html.H2(children='Firm Comments'),
    dash_table.DataTable(
        id='comments-table',
        columns=[{'name': 'Firm ID/Name', 'id': 'firm_id_name'}, {'name': 'Comments', 'id': 'comments'}],
        data=df[['firm_id_name', 'comments']].to_dict('records'),
        style_table={'overflowX': 'auto'},
        style_cell={
            'whiteSpace': 'normal',
            'height': 'auto',
        },
    )
])

# Callback for first preference pie chart
@app.callback(
    Output('first-pref-pie', 'figure'),
    Input('first-pref-pie', 'id')
)
def update_first_pref_pie(_):
    fig = px.pie(df, names='first_pref_date', title='First Preference Date Distribution', 
                 hover_data={'first_pref_date': True}, labels={'first_pref_date': 'Date'})
    fig.update_traces(textinfo='percent+label', hovertemplate='%{label}: %{value} (%{percent})')
    return fig

# Callback for second preference pie chart
@app.callback(
    Output('second-pref-pie', 'figure'),
    Input('second-pref-pie', 'id')
)
def update_second_pref_pie(_):
    fig = px.pie(df, names='second_pref_date', title='Second Preference Date Distribution', 
                 hover_data={'second_pref_date': True}, labels={'second_pref_date': 'Date'})
    fig.update_traces(textinfo='percent+label', hovertemplate='%{label}: %{value} (%{percent})')
    return fig

# Callback for third preference pie chart
@app.callback(
    Output('third-pref-pie', 'figure'),
    Input('third-pref-pie', 'id')
)
def update_third_pref_pie(_):
    fig = px.pie(df, names='third_pref_date', title='Third Preference Date Distribution', 
                 hover_data={'third_pref_date': True}, labels={'third_pref_date': 'Date'})
    fig.update_traces(textinfo='percent+label', hovertemplate='%{label}: %{value} (%{percent})')
    return fig

# Callback for stacked bar chart
@app.callback(
    Output('stacked-bar-chart', 'figure'),
    Input('stacked-bar-chart', 'id')
)
def update_stacked_bar_chart(_):
    df_counts = df[['first_pref_date', 'second_pref_date', 'third_pref_date']].melt(var_name='Preference', value_name='Date')
    df_counts = df_counts.groupby(['Date', 'Preference']).size().reset_index(name='Count')
    
    fig = px.bar(df_counts, x='Date', y='Count', color='Preference', 
                 title='Preference Dates Distribution',
                 labels={'Date': 'Dates', 'Count': 'Count'},
                 barmode='stack',
                 text='Count')
    
    fig.update_layout(yaxis={'title': 'Percentage'}, yaxis_tickformat = '%')
    
    return fig

if __name__ == '__main__':
    app.run_server(debug=True)

Sub ImportAndAnalyzeNifty50Data()
    Dim ws As Worksheet
    Set ws = ThisWorkbook.Sheets("Nifty50Data")
    
    ' Clear existing data
    ws.Cells.Clear
    
    ' Import CSV data
    With ws.QueryTables.Add(Connection:="TEXT;nifty_50_data.csv", Destination:=ws.Range("A1"))
        .TextFileParseType = xlDelimited
        .TextFileConsecutiveDelimiter = False
        .TextFileTabDelimiter = False
        .TextFileSemicolonDelimiter = False
        .TextFileCommaDelimiter = True
        .TextFilePlatform = xlWindows
        .Refresh BackgroundQuery:=False
    End With
    
    ' Calculate average closing price for each stock
    Dim lastRow As Long
    lastRow = ws.Cells(ws.Rows.Count, "A").End(xlUp).Row
    
    Dim stockSymbols As Collection
    Set stockSymbols = New Collection
    
    Dim i As Long
    For i = 2 To lastRow
        On Error Resume Next
        stockSymbols.Add ws.Cells(i, 1).Value, CStr(ws.Cells(i, 1).Value)
        On Error GoTo 0
    Next i
    
    Dim stock As Variant
    Dim startRow As Long
    Dim endRow As Long
    Dim totalClose As Double
    Dim count As Long
    Dim avgClose As Double
    Dim outputRow As Long
    outputRow = 2
    
    ws.Cells(1, "G").Value = "Stock Symbol"
    ws.Cells(1, "H").Value = "Average Closing Price"
    
    For Each stock In stockSymbols
        startRow = Application.WorksheetFunction.Match(stock, ws.Columns("A"), 0)
        endRow = Application.WorksheetFunction.Match(stock & ".99999999999", ws.Columns("A"), 1) - 1
        
        totalClose = Application.WorksheetFunction.Sum(ws.Range("F" & startRow & ":F" & endRow))
        count = endRow - startRow + 1
        avgClose = totalClose / count
        
        ws.Cells(outputRow, "G").Value = stock
        ws.Cells(outputRow, "H").Value = avgClose
        
        outputRow = outputRow + 1
    Next stock
    
    MsgBox "Data import and analysis complete!", vbInformation
End Sub

function processEmailsForAbcLabel() {
  const LABEL_NAME = "abc";
  const TARGET_CC_EMAIL = "jeevan@gmail.com".toLowerCase();
  const SEARCH_TERM_BODY = "abc";

  try {
    let label = GmailApp.getUserLabelByName(LABEL_NAME);
    if (!label) label = GmailApp.createLabel(LABEL_NAME);

    const threads = GmailApp.search('is:inbox', 0, 20);

    for (let i = 0; i < threads.length; i++) {
      const thread = threads[i];
      // Skip threads that already have the label
      if (thread.getLabels().some(l => l.getName() === LABEL_NAME)) continue;

      const messages = thread.getMessages();

      for (let j = 0; j < messages.length; j++) {
        const message = messages[j];

        const body = message.getPlainBody().toLowerCase();
        const ccArray = message.getCc().toLowerCase().split(',').map(s => s.trim());

        if (body.includes(SEARCH_TERM_BODY) && ccArray.includes(TARGET_CC_EMAIL)) {
          message.addLabel(label);
        }
      }
    }
  } catch (e) {
    Logger.log(`Error: ${e.toString()}`);
    Logger.log(`Stack: ${e.stack}`);
  }
}

function runProcessing() {
  processEmailsForAbcLabel();
}

function processEmailsForAbcLabel() {
  const LABEL_NAME = "abc";
  const TARGET_CC_EMAIL = "jeevan@gmail.com";
  const SEARCH_TERM_SUBJECT = "abc";

  try {
    let label = GmailApp.getUserLabelByName(LABEL_NAME);
    if (!label) label = GmailApp.createLabel(LABEL_NAME);

    const threads = GmailApp.search('is:inbox', 0, 20);

    for (let i = 0; i < threads.length; i++) {
      const thread = threads[i];
      if (thread.getLabels().some(l => l.getName() === LABEL_NAME)) continue;

      const messages = thread.getMessages();
      for (let j = 0; j < messages.length; j++) {
        const message = messages[j];
        const subject = message.getSubject().toLowerCase();
        const ccArray = message.getCc().toLowerCase().split(',').map(s => s.trim());
        if (subject.includes(SEARCH_TERM_SUBJECT) && ccArray.includes(TARGET_CC_EMAIL.toLowerCase())) {
          message.addLabel(label);
        }
      }
    }
  } catch (e) {
    Logger.log(`Error: ${e.toString()}`);
    Logger.log(`Stack: ${e.stack}`);
  }
}

function runProcessing() {
  processEmailsForAbcLabel();
}

function processEmailsForAbcLabel() {
  const LABEL_NAME = "abc";
  const TARGET_CC_EMAIL_LOWER = "jeevan@gmail.com".toLowerCase(); // Pre-lowercase for efficiency
  const SEARCH_TERM_SUBJECT_LOWER = "abc".toLowerCase(); // Assuming "abc" is what you want to search, ensure it's lowercase for consistent comparison

  try {
    let label = GmailApp.getUserLabelByName(LABEL_NAME);
    if (!label) {
      label = GmailApp.createLabel(LABEL_NAME);
      Logger.log(`Label "${LABEL_NAME}" created.`);
    } else {
      Logger.log(`Label "${LABEL_NAME}" already exists.`);
    }

    // Consider increasing the '20' if you need to process more threads
    const threads = GmailApp.search('is:inbox', 0, 50); // Example: increased to 50
    Logger.log(`Found ${threads.length} threads to process.`);

    for (let i = 0; i < threads.length; i++) {
      const thread = threads[i];
      const messages = thread.getMessages();

      for (let j = 0; j < messages.length; j++) {
        const message = messages[j];

        // 1. Check if this message is already labeled
        let isMessageAlreadyLabeled = false;
        const messageLabels = message.getLabels();
        for (let k = 0; k < messageLabels.length; k++) {
          if (messageLabels[k].getName() === LABEL_NAME) {
            isMessageAlreadyLabeled = true;
            break;
          }
        }

        if (isMessageAlreadyLabeled) {
          // Logger.log(`Message "${message.getSubject()}" already has label "${LABEL_NAME}". Skipping.`);
          continue; // Skip this specific message
        }

        const subject = message.getSubject().toLowerCase();
        const ccHeader = message.getCc(); // Get the raw CC string

        let targetCcFoundInMessage = false;
        if (ccHeader && ccHeader.trim() !== "") {
          if (ccHeader.toLowerCase().includes(TARGET_CC_EMAIL_LOWER)) {
            targetCcFoundInMessage = true;
          }
        }

        // Logger.log(`Message: "${subject}", Has Subject Term: ${subject.includes(SEARCH_TERM_SUBJECT_LOWER)}, Has Target CC: ${targetCcFoundInMessage}`);

        if (subject.includes(SEARCH_TERM_SUBJECT_LOWER) && targetCcFoundInMessage) {
          message.addLabel(label);
          Logger.log(`Applied label "${LABEL_NAME}" to message: "${message.getSubject()}" (ID: ${message.getId()})`);
        }
      }
    }
    Logger.log('Finished processing emails.');
  } catch (e) {
    Logger.log(`Error: ${e.toString()}`);
    Logger.log(`Stack: ${e.stack}`);
  }
}

function runProcessing() {
  processEmailsForAbcLabel();
}

Sub CalculateAverage()
    Dim rng As Range
    Dim cell As Range
    Dim total As Double
    Dim count As Integer
    Dim average As Double
    
    ' Set the range to calculate average
    Set rng = Range("A1:A10")
    
    ' Initialize variables
    total = 0
    count = 0
    
    ' Loop through each cell in the range
    For Each cell In rng
        ' Check if the cell is not empty
        If Not IsEmpty(cell) Then
            ' Increment the count
            count = count + 1
            
            ' Add the cell value to the total
            total = total + cell.Value
        End If
    Next cell
    
    ' Calculate the average
    If count > 0 Then
        average = total / count
    Else
        average = 0
    End If
    
    ' Display the average
    MsgBox "The average is: " & average
End Sub

Sub SortData()
    Dim rng As Range
    Dim lastRow As Long
    
    ' Set the range to sort
    Set rng = Range("A1:B10")
    
    ' Get the last row in the range
    lastRow = rng.Rows.Count + rng.Row - 1
    
    ' Sort the range in ascending order based on column A
    rng.Sort Key1:=Range("A1:A" & lastRow), _
              Order1:=xlAscending, _
              Header:=xlYes
    
    ' Display a message
    MsgBox "Data sorted successfully!"
End Sub

Sub CopyData()
    Dim sourceRange As Range
    Dim destinationRange As Range
    
    ' Set the source range
    Set sourceRange = Range("A1:A10")
    
    ' Set the destination range
    Set destinationRange = Range("B1")
    
    ' Copy the data from source to destination
    sourceRange.Copy Destination:=destinationRange
    
    ' Display a message
    MsgBox "Data copied successfully!"
End Sub

' ... Add more procedures or functions here ...

Sub Main()
    ' Call the procedures
    CalculateAverage
    SortData
    CopyData
    
    ' ... Call more procedures or functions here ...
    
    MsgBox "All tasks completed!"
End Sub

import pandas as pd
import os

def kuchV(folder_path, columns):
    big_df = pd.DataFrame()

    if folder_path.startswith('Current'):
        file_prefix = 'Current'
    elif folder_path.startswith('Prev'):
        file_prefix = 'Prev'
    else:
        return big_df  # Return empty DataFrame if folder path doesn't start with 'Current' or 'Prev'

    for file in os.listdir(folder_path):
        if file.startswith(file_prefix) and file.lower().endswith('.csv'):
            file_path = os.path.join(folder_path, file)
            df = pd.read_csv(file_path)

            filtered_df = df[df['PB Class'] == 'Reserve']
            filtered_df = filtered_df[columns]  # Select desired columns

            big_df = pd.concat([big_df, filtered_df], ignore_index=True)

    return big_df

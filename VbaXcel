Sub ImportAndAnalyzeNifty50Data()
    Dim ws As Worksheet
    Set ws = ThisWorkbook.Sheets("Nifty50Data")
    
    ' Clear existing data
    ws.Cells.Clear
    
    ' Import CSV data
    With ws.QueryTables.Add(Connection:="TEXT;nifty_50_data.csv", Destination:=ws.Range("A1"))
        .TextFileParseType = xlDelimited
        .TextFileConsecutiveDelimiter = False
        .TextFileTabDelimiter = False
        .TextFileSemicolonDelimiter = False
        .TextFileCommaDelimiter = True
        .TextFilePlatform = xlWindows
        .Refresh BackgroundQuery:=False
    End With
    
    ' Calculate average closing price for each stock
    Dim lastRow As Long
    lastRow = ws.Cells(ws.Rows.Count, "A").End(xlUp).Row
    
    Dim stockSymbols As Collection
    Set stockSymbols = New Collection
    
    Dim i As Long
    For i = 2 To lastRow
        On Error Resume Next
        stockSymbols.Add ws.Cells(i, 1).Value, CStr(ws.Cells(i, 1).Value)
        On Error GoTo 0
    Next i
    
    Dim stock As Variant
    Dim startRow As Long
    Dim endRow As Long
    Dim totalClose As Double
    Dim count As Long
    Dim avgClose As Double
    Dim outputRow As Long
    outputRow = 2
    
    ws.Cells(1, "G").Value = "Stock Symbol"
    ws.Cells(1, "H").Value = "Average Closing Price"
    
    For Each stock In stockSymbols
        startRow = Application.WorksheetFunction.Match(stock, ws.Columns("A"), 0)
        endRow = Application.WorksheetFunction.Match(stock & ".99999999999", ws.Columns("A"), 1) - 1
        
        totalClose = Application.WorksheetFunction.Sum(ws.Range("F" & startRow & ":F" & endRow))
        count = endRow - startRow + 1
        avgClose = totalClose / count
        
        ws.Cells(outputRow, "G").Value = stock
        ws.Cells(outputRow, "H").Value = avgClose
        
        outputRow = outputRow + 1
    Next stock
    
    MsgBox "Data import and analysis complete!", vbInformation
End Sub

import json

def load_json(file_path):
    with open(file_path, 'r') as file:
        return json.load(file)

def flatten_json(y, prefix=''):
    out = {}
    for key, value in y.items():
        if isinstance(value, dict):
            out.update(flatten_json(value, prefix + key + '.'))
        else:
            out[prefix + key] = value
    return out

def compare_flattened_json(flattened_json1, flattened_json2):
    differences = []

    for key in flattened_json1:
        if key not in flattened_json2:
            differences.append(f"Key '{key}' found in first JSON but not in second JSON")
        elif flattened_json1[key] != flattened_json2[key]:
            differences.append(f"Value difference at '{key}': {flattened_json1[key]} (first JSON) != {flattened_json2[key]} (second JSON)")
    
    for key in flattened_json2:
        if key not in flattened_json1:
            differences.append(f"Key '{key}' found in second JSON but not in first JSON")

    return differences

def main(json_file1, json_file2):
    json1 = load_json(json_file1)
    json2 = load_json(json_file2)

    flattened_json1 = flatten_json(json1)
    flattened_json2 = flatten_json(json2)

    differences = compare_flattened_json(flattened_json1, flattened_json2)

    if differences:
        print("Differences found:")
        for diff in differences:
            print(diff)
    else:
        print("The JSON files are identical.")


json_file1 = 'file1.json'
json_file2 = 'file2.json'
main(json_file1, json_file2)

import json

def load_json(file_path):
    with open(file_path, 'r') as file:
        return json.load(file)

def extract_key_value_pairs(json_obj, prefix=''):
    pairs = []
    for key, value in json_obj.items():
        full_key = f"{prefix}{key}"
        if isinstance(value, dict):
            pairs.extend(extract_key_value_pairs(value, prefix=full_key + "."))
        else:
            pairs.append((full_key, value))
    return pairs

def compare_key_value_pairs(pairs1, pairs2):
    set1 = set(pairs1)
    set2 = set(pairs2)

    only_in_first = set1 - set2
    only_in_second = set2 - set1

    return only_in_first, only_in_second

def main(json_file1, json_file2):
    json1 = load_json(json_file1)
    json2 = load_json(json_file2)

    pairs1 = extract_key_value_pairs(json1)
    pairs2 = extract_key_value_pairs(json2)

    only_in_first, only_in_second = compare_key_value_pairs(pairs1, pairs2)

    if only_in_first:
        print("Key-value pairs only in the first JSON file:")
        for pair in only_in_first:
            print(pair)

    if only_in_second:
        print("Key-value pairs only in the second JSON file:")
        for pair in only_in_second:
            print(pair)

    if not only_in_first and not only_in_second:
        print("The JSON files contain the same key-value pairs.")

# Example usage
json_file1 = 'file1.json'
json_file2 = 'file2.json'
main(json_file1, json_file2)

import tkinter as tk
from tkcalendar import DateEntry

def get_date():
    selected_date = cal.get_date()
    print(f"Selected Date: {selected_date}")

root = tk.Tk()
root.title("Calendar Input Example")

label = tk.Label(root, text="Select a date:")
label.pack(pady=10)

cal = DateEntry(root, width=16, background='darkblue',
                foreground='white', borderwidth=2)
cal.pack(pady=10)

button = tk.Button(root, text="Get Date", command=get_date)
button.pack(pady=10)

root.mainloop()

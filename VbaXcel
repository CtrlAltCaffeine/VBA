Sub ImportAndAnalyzeNifty50Data()
    Dim ws As Worksheet
    Set ws = ThisWorkbook.Sheets("Nifty50Data")
    
    ' Clear existing data
    ws.Cells.Clear
    
    ' Import CSV data
    With ws.QueryTables.Add(Connection:="TEXT;nifty_50_data.csv", Destination:=ws.Range("A1"))
        .TextFileParseType = xlDelimited
        .TextFileConsecutiveDelimiter = False
        .TextFileTabDelimiter = False
        .TextFileSemicolonDelimiter = False
        .TextFileCommaDelimiter = True
        .TextFilePlatform = xlWindows
        .Refresh BackgroundQuery:=False
    End With
    
    ' Calculate average closing price for each stock
    Dim lastRow As Long
    lastRow = ws.Cells(ws.Rows.Count, "A").End(xlUp).Row
    
    Dim stockSymbols As Collection
    Set stockSymbols = New Collection
    
    Dim i As Long
    For i = 2 To lastRow
        On Error Resume Next
        stockSymbols.Add ws.Cells(i, 1).Value, CStr(ws.Cells(i, 1).Value)
        On Error GoTo 0
    Next i
    
    Dim stock As Variant
    Dim startRow As Long
    Dim endRow As Long
    Dim totalClose As Double
    Dim count As Long
    Dim avgClose As Double
    Dim outputRow As Long
    outputRow = 2
    
    ws.Cells(1, "G").Value = "Stock Symbol"
    ws.Cells(1, "H").Value = "Average Closing Price"
    
    For Each stock In stockSymbols
        startRow = Application.WorksheetFunction.Match(stock, ws.Columns("A"), 0)
        endRow = Application.WorksheetFunction.Match(stock & ".99999999999", ws.Columns("A"), 1) - 1
        
        totalClose = Application.WorksheetFunction.Sum(ws.Range("F" & startRow & ":F" & endRow))
        count = endRow - startRow + 1
        avgClose = totalClose / count
        
        ws.Cells(outputRow, "G").Value = stock
        ws.Cells(outputRow, "H").Value = avgClose
        
        outputRow = outputRow + 1
    Next stock
    
    MsgBox "Data import and analysis complete!", vbInformation
End Sub

import xmltodict
import pandas as pd

with open('/mnt/data/file-Tp79FMU9XARcJLokQBZkwp') as f:
    raw_xml = f.read()

doc = xmltodict.parse(raw_xml)
portfolio = doc['ns2:portfolioRpt']['portfolio']
cycle_date = portfolio['cycle']['@date']

rows = []

if 'transactions' in portfolio:
    txs = portfolio['transactions']['transaction']
    if isinstance(txs, dict):
        txs = [txs]
    for txn in txs:
        payloads = txn['payload']
        if isinstance(payloads, dict):
            payloads = [payloads]
        for payload in payloads:
            txn_string = payload['string']
            rows.append({
                'cycle_date': cycle_date,
                'pbacctid': None,
                'transaction_string': txn_string
            })

entities = portfolio['entities']
if isinstance(entities, dict):
    entities = [entities]

for ent in entities:
    pbacctid = ent['@pbAcctId']
    if 'transactions' in ent:
        txs = ent['transactions']['transaction']
        if isinstance(txs, dict):
            txs = [txs]
        for txn in txs:
            payloads = txn['payload']
            if isinstance(payloads, dict):
                payloads = [payloads]
            for payload in payloads:
                txn_string = payload['string']
                rows.append({
                    'cycle_date': cycle_date,
                    'pbacctid': pbacctid,
                    'transaction_string': txn_string
                })

df = pd.DataFrame(rows)
print(df)
